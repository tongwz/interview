<?php

// 2025年1月15日19:46:09  冒泡排序
// 思路：简单就是每个数都拿到后一个数据的比较循环一次将最大值放到最后面依次循环
// 总结：这些复杂度对于理解算法在不同条件下的性能非常重要。
// 通常来说，时间复杂度决定了算法运行的速度，而空间复杂度则影响到算法所需的内存大小。
// 在实际应用中，应该根据具体情况选择合适的排序算法。例如，在小规模数据集上，简单排序如插入排序可能比更复杂的快速排序或归并排序更快;
// 而在大规模数据集上，则应优先考虑具有更好时间复杂度的算法，如快速排序或归并排序。

/**
 * @param array $arr
 * @return array
 */
function bubbleSort(array $arr): array
{
    $len = count($arr);
    for ($i = 0; $i < $len - 1; $i++) {
        for ($j = 0; $j < $len - $i - 1; $j++) {
            if ($arr[$j] > $arr[$j + 1]) {
                $tmp = $arr[$j];
                $arr[$j] = $arr[$j + 1];
                $arr[$j + 1] = $tmp;
            }
        }
    }
    return $arr;
}

$arr = [1, 3, 2, 9, 6, 5];
var_dump(bubbleSort($arr));
echo "<br>";
